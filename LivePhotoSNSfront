'use client'

import { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent } from "@/components/ui/card"
import { Camera, Send } from 'lucide-react'

export default function Home() {
  const [photos, setPhotos] = useState([])
  const [newPhoto, setNewPhoto] = useState(null)
  const [uploading, setUploading] = useState(false)

  useEffect(() => {
    fetchPhotos()
    const interval = setInterval(fetchPhotos, 10000) // 10초마다 새 사진 확인
    return () => clearInterval(interval)
  }, [])

  const fetchPhotos = async () => {
    try {
      const response = await fetch('/api/photos')
      if (response.ok) {
        const data = await response.json()
        setPhotos(data)
      }
    } catch (error) {
      console.error('Error fetching photos:', error)
    }
  }

  const handlePhotoUpload = async (e) => {
    e.preventDefault()
    if (!newPhoto || uploading) return

    setUploading(true)
    try {
      const filename = Date.now() + '-' + newPhoto.name.replace(/\s/g, '-')
      const signedUrlResponse = await fetch(`/api/get-upload-url?filename=${encodeURIComponent(filename)}`)
      const { url, fields } = await signedUrlResponse.json()

      const formData = new FormData()
      Object.entries(fields).forEach(([key, value]) => {
        formData.append(key, value as string)
      })
      formData.append('file', newPhoto)

      const uploadResponse = await fetch(url, {
        method: 'POST',
        body: formData,
      })

      if (uploadResponse.ok) {
        const photoUrl = `https://${process.env.NEXT_PUBLIC_R2_BUCKET_NAME}.r2.cloudflarestorage.com/${filename}`
        setPhotos(prevPhotos => [{ id: Date.now(), url: photoUrl, createdAt: new Date().toISOString() }, ...prevPhotos])
        setNewPhoto(null)
      } else {
        console.error('Upload failed')
      }
    } catch (error) {
      console.error('Error uploading photo:', error)
    } finally {
      setUploading(false)
    }
  }

  return (
    <div className="container mx-auto p-4 max-w-2xl">
      <h1 className="text-3xl font-bold mb-6 text-center">라이브 포토 SNS</h1>
      <Card className="mb-8">
        <CardContent className="p-4">
          <form onSubmit={handlePhotoUpload} className="flex items-center space-x-2">
            <Input
              type="file"
              accept="image/*"
              onChange={(e) => setNewPhoto(e.target.files[0])}
              className="flex-grow"
              disabled={uploading}
            />
            <Button type="submit" disabled={uploading || !newPhoto}>
              {uploading ? (
                <span className="animate-spin mr-2">⏳</span>
              ) : (
                <Camera className="mr-2 h-4 w-4" />
              )}
              {uploading ? '업로드 중...' : '업로드'}
            </Button>
          </form>
        </CardContent>
      </Card>
      <div className="space-y-4">
        {photos.map((photo) => (
          <Card key={photo.id} className="overflow-hidden">
            <CardContent className="p-0">
              <img src={photo.url} alt={`Photo ${photo.id}`} className="w-full h-auto" />
              <div className="p-4 flex justify-between items-center">
                <span className="font-semibold">{new Date(photo.createdAt).toLocaleString()}</span>
                <Button variant="ghost" size="sm">
                  <Send className="h-4 w-4 mr-2" /> 공유
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}
